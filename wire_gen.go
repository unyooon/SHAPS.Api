// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"shaps.api/controller"
	"shaps.api/domain"
	"shaps.api/domain/setting"
	"shaps.api/infrastructure/db"
	"shaps.api/infrastructure/external"
	"shaps.api/infrastructure/repository"
)

import (
	_ "shaps.api/docs"
)

// Injectors from wire.go:

func InitializeHandler(s setting.Setting) *Routing {
	dbDb := db.NewDb(s)
	subscriptionRepository := repository.NewSubscriptionRepository(dbDb)
	userRepository := repository.NewUserRepository(dbDb)
	createSubscriptionInteractor := domain.NewCreateSubscriptionInteractor(subscriptionRepository, userRepository)
	joinSubscriptionInteractor := domain.NewJoinSubscriptionInteractor(subscriptionRepository, userRepository)
	subscriptionController := controller.NewSubscriptionController(createSubscriptionInteractor, joinSubscriptionInteractor)
	stripeClient := external.NewStripeClient(s)
	createUserInteractor := domain.NewCreateUserInteractor(userRepository, stripeClient)
	readUserInteractor := domain.NewReadUserInteractor(userRepository)
	userController := controller.NewUserController(createUserInteractor, readUserInteractor)
	createStripeConnectInteractor := domain.NewCreateStripeConnectInteractor(userRepository, stripeClient)
	readMeInteractor := domain.NewReadMeInteractor(userRepository)
	updateMeInteractor := domain.NewUpdateMeInteractor(userRepository)
	readHostsInteractor := domain.NewReadHostsInteractor(userRepository, subscriptionRepository)
	readConstructsInteractor := domain.NewReadConstructsInteractor(userRepository, subscriptionRepository)
	meController := controller.NewMeController(createStripeConnectInteractor, readMeInteractor, updateMeInteractor, readHostsInteractor, readConstructsInteractor)
	routing := NewRouting(subscriptionController, userController, meController, s)
	return routing
}
